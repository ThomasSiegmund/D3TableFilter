% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/D3TableFilter.R
\name{d3tf}
\alias{d3tf}
\title{d3tf Generate a HTML table widget with advanced filtering, sorting and 
colouring.}
\usage{
d3tf(df, enableTf = TRUE, tableProps = NULL, showRowNames = FALSE,
  colNames = NULL, extensions = NULL, selectableRows = NULL,
  selectableRowsClass = "info", tableStyle = "table", rowStyles = NULL,
  bgColScales = list(), fgColScales = list(), edit = FALSE,
  radioButtons = NULL, checkBoxes = NULL, cellFunctions = list(),
  filterInput = FALSE, initialFilters = list(), footData = NULL,
  footCellFunctions = list(), sparklines = list(), colsResizable = FALSE,
  colsResizableOptions = list(), width = NULL, height = NULL)
}
\arguments{
\item{df}{Data frame, matrix or or \link[crosstalk]{SharedData} object to display as html table}

\item{enableTf}{Enable the features for the "HTML table filter generator"}

\item{tableProps}{A list object describing appearence and function of the 
table}

\item{showRowNames}{Add the R row names as first column to the table}

\item{colNames}{Named character list to display as column names}

\item{extensions}{List of table filter extensions to load. See
inst/examples/feature/server.R}

\item{selectableRows}{Enable row selection on (\code{cltr-}) mouse click. If 
\code{"multi"} multiple rows will be selectable using (\code{cltr click}), 
if  \code{"single"}  only a single line will be selectable.}

\item{selectableRowsClass}{CSS class of selected row. Could be "active", 
"success", "info", "warning", or "danger" from Bootstrap3. Default: "info."}

\item{tableStyle}{List css classes to apply to a table. Bootstrap3 provides 
\code{table}, \code{table-striped}, \code{table-bordered}, 
\code{table-hover}, and \code{table-condensed}. The \code{table-hover} 
class is applied automatically if \code{selectableRows} is active. If 
\code{tableStyle} is not NULL, the normal CSS styling of TableFilter is 
automatically cut down by appending \code{stylesheet = 
"tablefilter-2.5/filtergridBS.css"} to the tableProps.}

\item{rowStyles}{Character vector of Bootstrap classes to apply to rows. 
Could be used to pre-select rows when using the \code{selectableRows} 
interface.}

\item{bgColScales}{List of background colour scales to apply to the columns}

\item{fgColScales}{List of text colour scales to apply to the columns}

\item{edit}{Set whole table or selected columns editable. See details.}

\item{radioButtons}{Turn logical columns into radio buttons 
(\code{radioButtons = "col_4"}).}

\item{checkBoxes}{Turn logical columns into checkboxes (\code{checkBoxes = 
"col_3"}).}

\item{cellFunctions}{Run D3 functions to format a column. Can be used to 
generate D3 graphics in cells.}

\item{filterInput}{Generate an input element named outputid + "_filter" 
listing filter settings and valid rows}

\item{initialFilters}{List of initial filter settings filter settings and 
valid rows}

\item{footData}{Data frame or matrix to append as footer to the table. Column
names must match the colnames of the main table. Cells in the footer will 
get an id attribute (e.g. first footer row, second column in "mtcars" 
output is named "frow_0_fcol_1_tbl_mtcars") allowing them to be used with 
the "col_operation" option of TableFilter.}

\item{footCellFunctions}{Run D3 functions to format a footer column. Can be 
used to format table footer or to generate D3 graphics in cells.}

\item{sparklines}{List of per column options to turn cell values into 
sparkline visulizations.}

\item{colsResizable}{Enable interactive column resizing using the jquery
\href{https://github.com/alvaro-prieto/colResizable}{colResizable} plugin.}

\item{colsResizableOptions}{List of options for column resizing.
Set to NULL to disable.}
}
\description{
R interface to Max Guglielmi's \href{http://koalyptus.github.io/TableFilter/}{TableFilter} JavaScript library. Provides advanced filtering and 
sorting. Columns can be formatted using D3 functions.
}
\section{Configuration}{
 The D3TableFilter widget can be highly customized. 
  See the website of the JavaScript library 
  \href{http://koalyptus.github.io/TableFilter/}{TableFilter} for 
  details. Configuration is passed as a list of key value pairs to the 
  JavaScript engine. A shiny app demonstrating many useful features in one 
  table can be found in the inst/examples/feature directory of this package.
}

\section{Extensions}{
 Some of the TableFilter functions are beeing provided as
  extensions, in particular \itemize{ \item ColsVisibility: Visibility of 
  columns can be adjusted by configuration or interactively \item 
  Sorting: Sort table by click on column headers \item 
  FiltersRowVisibility: Interactively show or hide the filter row. } To 
  activate these extensions simply define them as a character vector in the 
  extensions parameter, e.g. \code{extensions = c("ColsVisibility", 
  "ColumnsResizer", "FiltersRowVisibility")}. This takes care of enabling and
  basic configuration of the extensions. For further customization use the 
  tableProps parameter.
}

\section{Editing}{
 The whole table (\code{edit = TRUE}) or selected columns 
  (\code{edit = c("col_1", "col_3")}) can set to be editable. An editable 
  table provides an input element named like the corresponding output element
  + "_edit". Here each (debounced) edit event in a table cell is visible as a
  list of row (\code{row}), column (\code{col}) and new value (\code{val}). 
  See examples/interaction for a Shiny app demonstrating this feature.
}

\section{Colouring}{
 Table columns can be colored based on their cells value 
  using D3.js colour scales. Table background and foreground (text) can be 
  coloured independently. Colour definitions are passed to the JavaScript 
  engine as D3 scale functions. This allows for a variety of scales for 
  different purposes. See 
  \href{https://github.com/mbostock/d3/wiki/Scales}{D3 scale documentation} 
  and examples below for details. As a shortcut a linear scale over the full 
  value range of a column can be defined as \code{col_n = 
  "auto:startcolour:endcolour"} (n is the column number, starting with 0).
  For better mapping from numeric values to perceived intensity a HCL colour 
  interpolation is used. An example Shiny app showing various colour scales
  can be found in the inst/examples/colour/ directory of this package.
}

\section{Row selection}{
 If \code{selectableRows} is set to \code{"single"} or
  to \code{"multi"}, the widget provides a shiny input named outputid + 
  "_select". On (\code{ctrl-}) mouse click the input delivers an array of 1 
  based row coordinates. Selected rows are highligthed using the "info" 
  Bootstrap class. \code{setRowClass} can be used to set or to unset this 
  class from the server. See the "interaction" shiny app in the 
  inst/examples/ directory of this package for an example.
}

\section{Sparklines}{
 Table columns containing a comma separated series of 
  numbers (\code{"1,3,5,7,11"}) can be turned into sparkline visualizations.
  For example, \code{sparklines = list(col_0 = list(type = "line"))} will
  turn the cells of the first column into a minature line chart. See the
  "sparklines" shiny app in the inst/examples/sparklines directory of this
  package for an example.
}

\examples{
# ------------------------------------------------------------------------------
# colour definition: apply a white to blue linear scale to the background of the 
# first column ("col_0") over a range of values from 0 to 200 
# ------------------------------------------------------------------------------ 
bgColScales <- list(
col_0 = JS('function colorScale(i){
        var color = d3tf.scaleLinear()
        .domain([0, 200])
        .range(["white", "blue"]);
        return color(i);
     }'));
# ----------------------------------------------------------------------------    
# simplified colour definition: first column, linear scale from white to green
# ----------------------------------------------------------------------------
bgColScales <- list(
 col_0 = "auto:white:green"
)


# --------------------------------------------------------
# Minimal shiny app demonstrating the D3TableFilter widget
# server.R
# --------------------------------------------------------
library(shiny)
library(htmlwidgets)
library(D3TableFilter)

data(mtcars);

shinyServer(function(input, output, session) {
  output$mtcars <- renderD3tf({
    
    # Define table properties. See http://tablefilter.free.fr/doc.php
    # for a complete reference
    tableProps <- list(
      btn_reset = TRUE,
        # alphabetic sorting for the row names column, numeric for all other columns
        col_types = c("string", rep("number", ncol(mtcars)))
    );
    
    d3tf(mtcars,
         tableProps = tableProps,
         extensions = list(
          list(name = "sort")
         ),
         showRowNames = TRUE,
         tableStyle = "table table-bordered");
  })
})
}
\seealso{
\code{\link[DT]{datatable}}.
}
